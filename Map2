#include <iostream>
#include <unordered_map>
#include <string>

using namespace std;
 
int getIntegerValue(string s) {
    unordered_map<char, int> mapping = {
        {'I', 1}, {'V', 5}, {'X', 10}, {'L', 50}, {'C', 100}, {'D', 500}, {'M', 1000}, {'N', 0}
    };
    
    int value = 0;
 
    for (int i = 0; i < s.length(); i++)
    {
        if (i + 1 < s.length() && mapping[s[i]] < mapping[s[i + 1]]) {
            value -= mapping[s[i]];
        }
        else {
            value += mapping[s[i]];
        }
    }
 
    return value;
}

string to_roman(int b) // https://csharp.webdelphi.ru/algoritm-perevoda-chisel-iz-arabskoj-sistemy-v-rimskuyu-i-obratno/ алгоритм
{
  struct romandata_t { int b; char const* numeral; };
  static romandata_t const romandata[] =
     { 1000, "M",
        900, "CM",
        500, "D",
        400, "CD",
        100, "C",
         90, "XC",
         50, "L",
         40, "XL",
         10, "X",
          9, "IX",
          5, "V",
          4, "IV",
          1, "I",
          0, NULL }; // end marker

  string result;
  for (romandata_t const* current = romandata; current->b > 0; ++current) 
  {
    while (b >= current->b)
    {
      result += current->numeral;
      b -= current->b;
    }
  }  return result;
}

 
int main() {
    string s;
    int b;
    cin >> s;
    cin >> b;
    cout << getIntegerValue(s) << "\n";
    cout << to_roman(b);
}
